git config --list // проверить конфиг
git config --global [user.name] // прочитать/установить значения конфига

// Git Basics
git clone https://github.com/libgit2/libgit2 myname
git status -s // short status
git diff // show lines

git commit -a -m'text' // -a flag adds all files to the stage

git rm <file> --cached - delete from staged files
-f - delete file

The movement of a file or the renaming removes the file and creates new untracked file in git. You can use // git mv <directory_from> <directory_to> instead of that

git log // show the commits history
flag -2 // show 2 last
flag -p // show the difference 
flag --stat // show some abbreviated stats
flag --graph // show the graph
flag --pretty=<format>
	short, online, full, fuller,
	format:"%h - %an, %ar : %s"
		%H Commit hash
		%h Abbreviated commit hash
		%T Tree hash
		%t Abbreviated tree hash
		%P Parent hashes
		%p Abbreviated parent hashes
		%an Author name
		%ae Author email
		%ad Author date (format respects the --date=option) %ar Author date, relative
		%cn Committer name
		%ce Committer email
		%cd Committer date
		%cr Committer date, relative
		%s Subject
flag -(n) // Show only the last n commits
flag --since, --after // Limit the commits to those made after the speci- fied date.
flag --until, --before // Limit the commits to those made before the speci- fied date.
flag --author // Only show commits in which the author entry matches the specified string.
flag --committer // Only show commits in which the committer entry matches the specified string.
flag --grep // Only show commits with a commit message con- taining the string
flag -S // Only show commits adding or removing code matching the string

git reset HEAD <file> // unstage a staged file

git config --global alias.<alias> '<command>'

git branch <name> // create a new branch
git checkout <name> // checkout to <name> branch

git checkout -b <name> // create and checkout to a new branch
git merge <name> // merge <name> branch to the current
git merge -u // merge <remote>/<branch> like your local <branch>

git branch -d <name> // delete the branch
git branch -v // also show last commits
git branch --merged/--no-merged // show merged or not merged branches
git branch -D <name> // delete an unmerged branch
git branch -u <remote>/<branch> // create a track branch
git branch -vv // show last commits and remote branches

____Destribute Branch
Topic Branches
  You swtich everytime among your branches, merge them and so on. You create a branch for a feature or bug fix.

Long-Running Branches
  You have some open branches. You have master and some parallel workflow. When you have done a stable version you merge it. It is fir big project.


git ls-remote <remote> 
git remote show <remote> // show information about the remote branch

git push <remote> <branch>
git push <remote> <local_branch>:<remote_branch>

git checkout --track <remote>/<branch> // create a track branch

git fetch --all // fetch all remote branches

git pull // fetch and merge

git push <remote> --delete <branch> // delete remote branch

__Rebasing
git rebase <branch>
git checkout <branch>
git merge <prev_branch>
DONT PUSH COMMITS BEFORE REBASING

git reset --soft <commit> // leaves out index
git reset --hard <commit> // delete next after this commit

ssh-keygen -> Enter -> Enter -> Enter -> ~/.ssh/id_rsa.pub // create SSH key

git reflog // show where HEAD and branch references have been for the last few months

git stash // save unfinished changes (e.g. to switch to another branch) it is keeped in STACK
git stash list // show stashes

git stash apply <stash> // apply you stashes
